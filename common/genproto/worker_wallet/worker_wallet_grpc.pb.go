// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: worker_wallet.proto

package worker_wallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkerWalletService_FindById_FullMethodName = "/WorkerWalletService/FindById"
)

// WorkerWalletServiceClient is the client API for WorkerWalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerWalletServiceClient interface {
	FindById(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*WorkerWalletResponse, error)
}

type workerWalletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerWalletServiceClient(cc grpc.ClientConnInterface) WorkerWalletServiceClient {
	return &workerWalletServiceClient{cc}
}

func (c *workerWalletServiceClient) FindById(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*WorkerWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkerWalletResponse)
	err := c.cc.Invoke(ctx, WorkerWalletService_FindById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerWalletServiceServer is the server API for WorkerWalletService service.
// All implementations must embed UnimplementedWorkerWalletServiceServer
// for forward compatibility.
type WorkerWalletServiceServer interface {
	FindById(context.Context, *SearchRequest) (*WorkerWalletResponse, error)
	mustEmbedUnimplementedWorkerWalletServiceServer()
}

// UnimplementedWorkerWalletServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkerWalletServiceServer struct{}

func (UnimplementedWorkerWalletServiceServer) FindById(context.Context, *SearchRequest) (*WorkerWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedWorkerWalletServiceServer) mustEmbedUnimplementedWorkerWalletServiceServer() {}
func (UnimplementedWorkerWalletServiceServer) testEmbeddedByValue()                             {}

// UnsafeWorkerWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerWalletServiceServer will
// result in compilation errors.
type UnsafeWorkerWalletServiceServer interface {
	mustEmbedUnimplementedWorkerWalletServiceServer()
}

func RegisterWorkerWalletServiceServer(s grpc.ServiceRegistrar, srv WorkerWalletServiceServer) {
	// If the following call pancis, it indicates UnimplementedWorkerWalletServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkerWalletService_ServiceDesc, srv)
}

func _WorkerWalletService_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerWalletServiceServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerWalletService_FindById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerWalletServiceServer).FindById(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkerWalletService_ServiceDesc is the grpc.ServiceDesc for WorkerWalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkerWalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WorkerWalletService",
	HandlerType: (*WorkerWalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindById",
			Handler:    _WorkerWalletService_FindById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worker_wallet.proto",
}
